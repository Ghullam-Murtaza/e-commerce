



######################### Auto Reload or Hot Reload not working in Gitpod by default #########################;
(article link: https://github.com/facebook/create-react-app/issues/11897)

>>> Solution: Copy the following Code to 'node_modules/react-scripts/config/webpackDevServer.config.js' inside the
         'return' statement of 'module.exports' (normally at the end);

Code:

client: {
    webSocketURL: { hostname: undefined, pathname: undefined, port: '0' },
  },
  port: 3000,

######################### Bootstrap 'content going outside its box #########################;
>>> give the 'Row' that exist inside any component other than 'Non-Fluid Container', a 'margin' auto or zero because the
    'Row' component has default 'negative margin' set on it probably to counter the 'padding' applied by the 'Non-Fluid
    Container'. and 'Col' has 'padding' applied on to counter that 'negative margin' of 'Row'.
  So when you see your 'content' going outside its content-box then make sure to see if that 'element' or its
  'parent' is applying any 'negative margins or paddings'.
  Normally, you should set 'margin-zero' on 'Row' and 'padding-zero' on 'Col' and then set the desired 'padding' on the
  'Non-Fluid Container' (like in the axil-bar, I have set the horizontal 'padding' of '8px' on 'Non-Fluid Container' that
  was by default '-12px').

######################### Font-Awesome Icons in CSS in '::after' sudo element #########################;
>>> there are 2 ways to add Icons in CSS;
1) add the '.ttf' font-file of desired 'Icons' in the '@font-face' rule (this method require less code in your
'repository')

2) put the '.css' file(s) and the files present inside the 'webfonts' folder of your desired 'Icons' inside
'assets' folder, then 'import' the '.css' icon-file of desired 'Icons' in the css file where you need to use them
or you can just 'import' at once in your 'App.scss'.

(note: give the correct 'font-weight' to the 'Icon' or it will not show. (like for 'solid' icons, give a
'font-weight' of '900' to the 'Icon'.))

######################### 'SVG Icons in CSS ::after pseudo-element' #########################;
> By using the following Tweaks, you can only change the Color of the 'SVG Icon' but not its 'stroke' and 'stroke-width'.
::after {
  content: url("../../assets/icons/chevron/chevronDown1.svg");
  filter: invert(51%) sepia(0%) saturate(636%) hue-rotate(135deg) brightness(87%) contrast(64%);
  stroke: var(--color-body) !important;
  stroke-width: 1px !important;
}

>>> So, I converted the 'SVG Icons' in 'Font-Icons', so they can be styled using styling properties used for 'text'.
And in order to change the 'font-weight' of the 'Font-Icons', you need to create different 'SVG Icons' for every desired 'font-weight' value.

######################### Bootstrap intellisense #########################;
>>> install the following 'vs code' extension;
IntelliSense for CSS class names in HTML

######################### Gitpod port 3000 or any other port not found error #########################;
>>> try to change the port in .gitpod.yml file, see documentation on how to (its a try as I did not used it)
